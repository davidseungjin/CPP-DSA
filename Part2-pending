#include <iostream>
#include <string>
#include <fstream>
#include "Timer.h"

using namespace std;

class UnorderedLinkedList
{
	struct ListNode{
		string info;
		ListNode* next;
		ListNode (string new_info, ListNode *new_next)
			:info(new_info), next(new_next){}
		static void print(ostream& out, ListNode* L)
		{
			if(L)
			{
				out << L->info << endl;
				print(out, L->next);
			}
		}
	};
	ListNode* head;
public:
	UnorderedLinkedList();
	~UnorderedLinkedList();
	void insert(string word);
	bool find(string word);
	void remove(string word);
	void print(ostream& out);
	bool isEmpty();
//	bool isFull(); is it worthy talk about full in linked list?
};


//isEmpty
bool UnorderedLinkedList::isEmpty()
{
	return head==NULL;
}

// constructor
UnorderedLinkedList::UnorderedLinkedList()
:head(NULL){}


// destructor
UnorderedLinkedList::~UnorderedLinkedList()
{
	while(!isEmpty())
	{
		ListNode* old = head;
		head = old->next;
		delete old;
	}
}

//David wrote: insert at the first (study later about inserting at middle and the end.
void UnorderedLinkedList::insert(string word)
{
	ListNode* v = new ListNode(word, head);
//	v->info = word;
//	v->next = head;
	head = v;
}

//David wrote: also, this is remove element from the front of the list. study others later.
//Oh it seems, homework itself looks remove word after searching by looking function signature
//According to GeeksforGeeks, order is 1) find previous node of the node to be deleted, 2) change the vest of previous node. 3) Free memory for the node to be deleted.
// Let's do find function first. I think it can be applied to remove function.

bool UnorderedLinkedList::find(string word)
{
	ListNode* current = new ListNode;
	current = head;
	while (current != NULL)
	{
		if (current->info == word)
			return true;
		current = current->next;
	}
	return false;
	delete current; // is this necessary? 
}

void UnorderedLinkedList::remove(string word)
{
	ListNode* current = new ListNode;
	ListNode* previous = new ListNode;
	current = head;

//	if (current != NULL && current->info == word)
//	{
//		head = current->next;
//		delete current;
//	}
//	Daivd: I think this is redundant. so commented.
//
	while (current !=NULL)
	{
		if (current->info!=word)
		{
			previous = current;
			current = current->next;
		}
		else
		{
			previous->next = current->next;
			delete current;
		}
	}
//	How do I care previous node? I know it is dynamically created as object on the heap
}



void UnorderedArrayList::print(ostream& out){}
//David wrote: when compile, undefined error unless above is declared.

ostream& operator << (ostream& out, UnorderedLinkedList& L)
{
	L.print(out);
	return out;
}
void insert_all_words(string file_name, UnorderedLinkedList& L)
{

 * declare timer object
 * open file
 * start timer
 * for each word, w, in file
 * 	L.insert(w);
 * stop timer
 * close file
 * report time

}

void find_all_words(string file_name, UnorderedLinkedList& L)
{
}

void remove_all_words(string file_name, UnorderedLinkedList& L)
{
}

void test_UnorderedLinkedList_methods(string file_name, UnorderedLinkedList& L)
{
	cout << "Testing UnorderedArrayList: " << endl;
	insert_all_words(file_name, L);
	find_all_words(file_name, L);
	remove_all_words(file_name, L);
}

int main(int argc, char * argv[])
{
	const char * input_file = argc == 2 ? argv[1] : "random_b.txt";
    UnorderedLinkedList ULL;
    test_UnorderedLinkedList_methods(input_file, ULL);


	return 0;
}
