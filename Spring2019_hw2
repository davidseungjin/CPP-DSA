#include <iostream>
#include <string>
#include <fstream>
#include "Timer.h"

using namespace std;


class UnorderedArrayList
{
	string* buf;
	int capacity;
	int size;

public:
	UnorderedArrayList(int max_len);
	~UnorderedArrayList();
	void insert(string word);
	bool find(string word);
	void remove(string word);
	void print(ostream& out);
	bool isEmpty();
	bool isFull();

};


// David wrote constructor;
UnorderedArrayList::UnorderedArrayList(int max_len)
{
	capacity = max_len;
	buf = new string[capacity];
	size = 0;
}

// David wrote destructor;
UnorderedArrayList::~UnorderedArrayList()
{
	delete[] buf;
}

// David wrote isEmpty();
bool UnorderedArrayList::isEmpty()
{
	if(size == 0)
		return true;
	else
		return false;
}

// David wrote isFull();
bool UnorderedArrayList::isFull()
{
	if(size >= capacity)
		return true;
	else
		return false;
}

// David wrote void insert(string word);
void UnorderedArrayList::insert(string word)
{
	if(isfull() == true)
	{
		cout << "sorry, size is full. no more insertion for " << word << endl;
	}	
	else
	{
		buf[size] = word;
		size++;
	}
}

// David wrote
bool UnorderedArrayList::find(string word)
{
	for(int i=0; i < size; i++)
	{
		if (buf[i] == word)
		{
			return true;
//			cout << "Found";
		} else
		{
			return false;
//			cout << "Not found";
		}
	}
}
			
// David wrote
void UnorderedArrayList::remove(string word)
{
	for(int i=0; i < size; i++)
	{
		if (buf[i] == word)
		{ 	
			buf[i]=buf[size-1];
			size = size - 1;
			break; 
			// break: to stop further for-loop 
			// after if-statement achieved.
		}
	}
}

void UnorderedArrayList::print(ostream& out)
{
	for(int i=0; i< size; ++i) 
	{
		out << buf[i] << endl;
	}
}


class UnorderedLinkedList
{
	struct ListNode{
		string info;
		ListNode* next;
		ListNode (string new_info, ListNode *new_next)
			:info(new_info), next(new_next){}
		static void print(ostream& out, ListNode* L)
		{
			if(L)
			{
				out << L->info << endl;
				print(out, L->next);
			}
		}
	};
	ListNode* head;
public:
	UnorderedLinkedList();
	~UnorderedLinkedList();
	void insert(string word);
	bool find(string word);
	void remove(string word);
	void print(ostream& out);
	// HW requirement: no additional methods to classes. thus below two methods should not be added.
//	bool isEmpty();
//	bool isFull(); is it worthy talk about full in linked list?
};


// constructor
UnorderedLinkedList::UnorderedLinkedList()
:head(NULL){}


// destructor
UnorderedLinkedList::~UnorderedLinkedList()
{
	while(!empty())
		remove(*head);
}

//insert
void UnorderedLinkedList::insert(string word)
{
	ListNode* v = new ListNode(word, head);
	head = v;
}

//remove
void UnorderedLinkedList::remove(string word)
{
	if(head==NULL) return;
	if(head->info == word) {
		ListNode* newhead = head->next;
		delete head;
		head = newhead;
		return;
	}
	for(ListNode* prev=head; prev->next!=NULL; prev=prev->next)
	{
		if(prev->next->info == word) {
			ListNode *nodetodelete = prev->next;
			prev->next = prev->next->next;
			delete nodedelete;
			break;
		}
	}
	return;
}









ostream& operator << (ostream& out, UnorderedArrayList& L)
{
	L.print(out);
	return out;
}


ostream& operator << (ostream& out, UnorderedLinkedList& L)
{
	L.print(out);
	return out;
}

void insert_all_words(string file_name, UnorderedArrayList& L)
{

//declare timer object
	Timer t;
	double eTime;
//open file
	ifstream f("random_b.txt");
	string w;	

//start timer
	t.start();
//for each word, w, in file
	if(f.is_open())
	{
		while(getline(f, w))
		{	
		L.insert(w); 
		}	
	}
	else
	{
		cout << "file is not opened. check" << endl;
	}
//stop timer
	t.elapsedUserTime(eTime); 
//close file
	f.close();
//report time
	cout << "insert_all_words run time \t\t" << eTime << endl;

}

void find_all_words(string file_name, UnorderedArrayList& L)
{
//declare timer object
	Timer t;
	double eTime;
//open file
	ifstream f("random_b.txt");
	string word;
//	assume file is opened and object L is already created and inserted.	
	
//start timer
	t.start();
	while(getline(f, word))
	{
		L.find(word);
	}
//stop timer
	t.elapsedUserTime(eTime); 
//close file
	f.close();

	cout << "find_all_words run time \t\t" << eTime << endl;
}

void remove_all_words(string file_name, UnorderedArrayList& L)
{
//declare timer object
	Timer t;
	double eTime;
//open file
	ifstream f("random_b.txt");
	string word;
//	assume file is opened and object L is already created and inserted.	

//start timer
	t.start();
	while(getline(f, word))
	{
		L.remove(word);
	}
//stop timer
	t.elapsedUserTime(eTime); 
//close file
	f.close();
	cout << "remove_all_words run time \t\t" << eTime << endl;
}

/*
void insert_all_words(string file_name, UnorderedLinkedList& L)
{

 * declare timer object
 * open file
 * start timer
 * for each word, w, in file
 * 	L.insert(w);
 * stop timer
 * close file
 * report time

}

void find_all_words(string file_name, UnorderedLinkedList& L)
{
}

void remove_all_words(string file_name, UnorderedLinkedList& L)
{
}
*/

void test_UnorderedArrayList_methods(string file_name, UnorderedArrayList& L)
{
	cout << "Testing UnorderedArrayList: " << endl;
	insert_all_words("random_b.txt", L);
	find_all_words("random_b.txt", L);
	remove_all_words(file_name, L);
}

/*
void test_UnorderedLinkedList_methods(string file_name, UnorderedLinkedList& L)
{
	cout << "Testing UnorderedArrayList: " << endl;
	insert_all_words(file_name, L);
	find_all_words(file_name, L);
	remove_all_words(file_name, L);
}
*/

int main(int argc, char * argv[])
{
	const char * input_file = argc == 2 ? argv[1] : "random_b.txt";
	UnorderedArrayList UAL(45500);
	test_UnorderedArrayList_methods(input_file, UAL);
//	UnorderedLinkedList ULL;
//	test_UnorderedLinkedList_methods(input_file, ULL);


	return 0;
}



