#include<iostream>
#include<string>
#include<fstream>

using namespace std;


class UnorderedArrayList
{
	string* buf;
	int capacity;
	int size;

public:
	UnorderedArrayList(int max_len);
	~UnorderedArrayList();
	void insert(string word);
	bool find(string word);
	void remove(string word);
	void print(ostream& out);
	bool isEmpty();
	bool isFull();

};


// David wrote constructor;
UnorderedArrayList::UnorderedArrayList(int max_len)
{
	capacity = max_len;
	buf = new string[capacity];
	size = 0;
}

// David wrote destructor;
UnorderedArrayList::~UnorderedArrayList()
{
	delete[] buf;
}

// David wrote isEmpty();
bool UnorderedArrayList::isEmpty()
{
	if(size == 0)
		return true;
	else
		return false;
}

// David wrote isFull();
bool UnorderedArrayList::isFull()
{
	if(size >= capacity)
		return true;
	else
		return false;
}

// David wrote void insert(string word);
void UnorderedArrayList::insert(string word)
{
	if(bool isfull = true)
	{
		cout << "sorry, size is full. no more insertion" << endl;
	}	
	else
	{
		buf[size] = word;
		size++;
	}
}

// David wrote
bool UnorderedArrayList::find(string word)
{
	for(int i=0; i < size; i++)
	{
		if (buf[i] == word)
		{
			return true;
//			cout << "Found";
		} else
		{
			return false;
//			cout << "Not found";
		}
	}
}
			
// David wrote
void UnorderedArrayList::remove(string word)
{
	if(bool find = true)
	{
		for(int i=0; i < size; i++)
		{
			if (buf[i] == word)
			{
				buf[i]=buf[size-1];
				size = size - 1;
				break; 
				// break: to stop further for-loop 
				// after if-statement achieved. 	
			}
		}
	}
}


ostream& operator << (ostream& out, UnorderedArrayList& L)
{
	L.print(out);
	return out;
}

void insert_all_words(string file_name, UnorderedArrayList& L)
{

//declare timer object

//open file
	ifstream f("random_b.txt");
	string w;	

//start timer

//for each word, w, in file
	if(f.is_open())
	{
		while(getline(f, w))
		{	
		L.insert(w); 
		}	
	}
	else
	{
		cout << "file is not opened. check" << endl;
	}
//stop timer
 
//close file
	f.close();
//report time


}

void find_all_words(string file_name, UnorderedArrayList& L)
{
	ifstream f("random_b.txt");
	string word;
//	assume file is opened and object L is already created and inserted.	
	
	while(getline(f, word))
	{
		L.find(word);
	}

}

void remove_all_words(string file_name, UnorderedArrayList& L)
{
	ifstream f("random_b.txt");
	string word;
//	assume file is opened and object L is already created and inserted.	

	while(getline(f, word))
	{
		L.remove(word);
	}


}


void test_UnorderedArrayList_methods(string file_name, UnorderedArrayList& L)
{
	cout << "Testing UnorderedArrayList: " << endl;
	insert_all_words(file_name, L);
	find_all_words(file_name, L);
	remove_all_words(file_name, L);
}


int main(int argc, char* argv[])
{
	const char* input_file = argc == 2 ? argv[1]: "random_b.txt";
	UnorderedArrayList UAL(45500);
	test_UnorderedArrayList_methods(input_file, UAL);

	return 0;
}
